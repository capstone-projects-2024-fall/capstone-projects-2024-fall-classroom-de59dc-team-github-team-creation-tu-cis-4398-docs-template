openapi: 3.0.2
info:
  version: 1.0.11
  title: Devs and Dragons - OpenAPI 3.0
  description: |-
    Pre-conditions for POST, GET, PATCH, and DELETE REST API calls which are used by the methods of our classes.


    POST: An authentication header with the authentication token. A content type header set to `application/json` for a JSON request block. A request body with with a JSON block that specifies values for all data fields (attributes) of the object to be created.


    GET: Appropriate endpoint.


    PATCH: An authentication header with the authentication token. A content type header set to `application/json` for a JSON request block. A request body with a JSON block that only specifies the data fields intended be changed with new values for the object. Appropriate endpoint.


    DELETE: Appropriate endpoint.

tags:
  - name: Quest
    description: Represents the main action users are pursuing. It is the unit of learning that users must do (aka play) and finish to move forward in the game which affects all the other game and user function. The main core function of Devs and Dragons.

  - name: Guild
    description: The guild class is responsible for managing guild-related data and functionality of the platform. It allows users to create, join and manage guilds and track information such as current guild members and assigned quests. The class provides functionality for instructors and students.  

paths:
  /quest:
    post:
      tags: 
      - Quest
      summary: Create Quest
      description: Creates a new quest in the database
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pre_created_Quest'
        required: true
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Quest'
        '405':
          description: Validation exception

  /quest/{quest_id}:
    get:
      tags:
      - Quest
      summary: Retrieve Quest data
      description: Returns JSON file with `quest_id`, `difficulty`, `number_of_problems`, `problem_topic`, `time_limit`, `creator`, `enemy`, `background`; all the data fields of the Quest class
      parameters:
      - name: quest_id
        in: path
        description: Unique identifier of quest
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Quest'
        '400':
          description: Invalid ID supplied
        '404':
          description: Quest not found

    patch:
      tags:
      - Quest
      summary: Update Quest Data
      description: Modifies quest data with only the data field needed to be changed for quest
      parameters:
      - name: quest_id
        in: path
        description: Unique identifier of quest
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/patched_Quest'
        required: true
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/patched_Quest'
        '400':
          description: Invalid ID supplied
        '404':
          description: Quest not found
        '405':
          description: Validation exception
    
    delete:
      tags:
      - Quest
      summary: Remove Quest
      description: Delete an existing quest from the database
      parameters:
        - name: quest_id
          in: path
          description: Unique identifier of quest
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Quest not found

  /user:
    post:
      tags:
      - User
      summary: Create User
      description: Create new user in the database
      operationId: create-new-user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pre_Created_User'
        required: true
      responses:
        '200':
          description: A successful operation generates a user_id and initializes an array of guilds the user is in and the quest they have made to null.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post_Created_User'
        '405':
          description: Invalid input
  /user/{user_id}:
    get:
      tags:
      - User
      summary: Get data of a specific user data
      description: Retrieve data of a specific user
      operationId: get-user-data
      parameters:
        - name: user_id
          in: path
          description: User ID of the user 
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:$ref: '#/components/schemas/User'
        '400':
          description: Invalid user ID
        '404':
          description: User ID not found

    patch:
      tags:
      - User
      summary: Update User Data
      description: Modifies user data with only the data field needed to be changed for user
      parameters:
        - name: user_id
          in: path
          description: User ID of the user
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patched_User'      
        '400':
          description: Invalid User ID
          
        '404':
          description: User not found
        '405':
          description: Validation exception
      
    delete:
      tags:
      - User
      summary: Delete a specific user
      description: Remove a user from the database
      operationId: delete-user-data
      parameters:
        - name: user_id
          in: path
          description: user id of the user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid User ID
        '404':
          description: User ID not found



  
    
    
  
components:
  schemas:
    Quest:
      type: object
      properties:
        quest_id:
          type: integer
          example: 45
          description: Each quest's unique identifier
        difficulty:
          type: integer
          example: 3
          description: Measured rigor of quest
        number_of_problems:
          type: integer
          example: 20
          description: Total questions in quest
        problem_topic:
          type: string
          example: "Algorithms"
          description:  Topic of quest
        time_limit:
          type: number
          example: 30.0
          description: Total time limit for players finishing quest
        creator:
          type: string
          example: "get_smart_every_day"
          description: User who created quest
        enemy:
          type: string
          example: "Alan Turing"
          description: Quest's villain challenging players with problems
        background:
          type: string
          example: "Tokyo"
          description: Wallpaper of quest

    pre_created_Quest:
      type: object
      properties:
        difficulty:
          type: integer
          example: 3
          description: Measured rigor of quest
        number_of_problems:
          type: integer
          example: 20
          description: Total questions in quest
        problem_topic:
          type: string
          example: "Algorithms"
          description:  Topic of quest
        time_limit:
          type: number
          example: 30.0
          description: Total time limit for players finishing quest
        creator:
          type: string
          example: "get_smart_every_day"
          description: User who created quest
        enemy:
          type: string
          example: "Alan Turing"
          description: Quest's villain challenging players with problems
        background:
          type: string
          example: "Tokyo"
          description: Wallpaper of quest

    patched_Quest:
      type: object
      properties:
        number_of_problems:
          type: integer
          example: 30
          description: Total questions in quest

    User:
      type: object
      properties:
        user_id:
          type: integer
          example: 12
          description: Static ID to specify each user from potential duplicates.
        username:
          type: string
          example: AppleIanBaum
          description: Desired name of the user.
        password:
          type: string
          example: password123
          description: Desired password of the user.
        email:
          type: string
          example: Apple@baum.com
          description: An email linked to the user's account for 2FA
        guilds_in:
          type: array
          items:
            type: string
          example: [guild1, guild2]
          description: The number of guilds a user is in
        quest_made:
          type: array
          items:
            type: string
          example: [quest1, quest2, quest2]
    Pre_Created_User:
      type: object
      properties:
        user_name:
          type: string
          example: AppleIanBaum
        password:
          type: string
          example: password123
        email:
          type: string
          example: Apple@baum.com
    Post_Created_User:
      type: object
      properties:
        user_id:
          type: integer
          example: 12
        user_name:
          type: string
          example: AppleIanBaum
        password:
          type: string
          example: password123
        email:
          type: string
          example: Apple@IanBaum.com
        guilds_in:
          type: array
          items:
            type: string
          example: null
        quest_made:
          type: array
          items:
            type: string
          example: null
    Patched_User:
      type: object
      properties: 
        username:
          type: string
          example: IanAppleBaum
          description: Changed username
    
    
    Guild:
      type: object
      properties:
        guild_id:
          type: integer
          example: 55
          description: Unique identifier that helps distinguish between different guilds in the system
        name:
          type: string
          example: Fairy Tale
          description: Stores the name of the guild to help users identify their guilds
        guild_code:
          type: integer
          example: 1793
          description: A code used for users to join a guild. It acts as an invite mechanism, allowing users to connect to new or existing guilds
        quest_assigned:
          type: array
          items:
            type: string
          example: [assigned_quest1, assigned_quest2, assigned_quest3]
          description: It is used to track what quest the guild is responsible for. It links to the quest table via Foreign Key(FK)
        guild_parties:
          type: array
          items:
            type: string
          example: [guild_party1, guild_party2, guild_party3]
          description: Organizes guild members into subgroups (parties) for the battle 

    pre_created_Guild:

    patched_Guild:


