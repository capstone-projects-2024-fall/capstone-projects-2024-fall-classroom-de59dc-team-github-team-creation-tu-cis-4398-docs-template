openapi: 3.0.2
info:
  version: 1.0.11
  title: Devs and Dragons - OpenAPI 3.0
  description: |-
    Pre-conditions for POST, GET, PATCH, and DELETE REST API calls which are used by the methods of our classes.


    POST: An authentication header with the authentication token. A content type header set to `application/json` for a JSON request block. A request body with with a JSON block that specifies values for all data fields (attributes) of the object to be created.


    GET: Appropriate endpoint.


    PATCH: An authentication header with the authentication token. A content type header set to `application/json` for a JSON request block. A request body with a JSON block that only specifies the data fields intended be changed with new values for the object. Appropriate endpoint.


    DELETE: Appropriate endpoint.

tags:
  - name: Quest
    description: Represents the main action users are pursuing. It is the unit of learning that users must do (aka play) and finish to move forward in the game which affects all the other game and user function. The main core function of Devs and Dragons.
    
paths:
  /quest:
    post:
      tags: 
      - Quest
      summary: Create Quest
      description: Creates a new quest in the database
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pre_created_Quest'
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Quest'
        '405':
          description: Validation exception

  /quest/{quest_id}:
    get:
      tags:
      - Quest
      summary: Retrieve Quest data
      description: Returns JSON file with `quest_id`, `difficulty`, `number_of_problems`, `problem_topic`, `time_limit`, `creator`, `enemy`, `background`; all the data fields of the Quest class
      parameters:
      - name: quest_id
        in: path
        description: Unique identifier of quest
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Quest'
        '400':
          description: Invalid ID supplied
        '404':
          description: Quest not found

    patch:
      tags:
      - Quest
      summary: Update Quest Data
      description: Modifies quest data with only the data field needed to be changed for quest
      parameters:
      - name: quest_id
        in: path
        description: Unique identifier of quest
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Quest'
        '400':
          description: Invalid ID supplied
        '404':
          description: Quest not found
        '405':
          description: Validation exception
    
    delete:




  
    
    
  
components:
  schemas:
    Quest:
      type: object
      properties:
        quest_id:
          type: integer
          example: 45
          description: Each quest's unique identifier
        difficulty:
          type: integer
          example: 3
          description: Measured rigor of quest
        number_of_problems:
          type: integer
          example: 20
          description: Total questions in quest
        problem_topic:
          type: string
          example: "Algorithms"
          description:  Topic of quest
        time_limit:
          type: number
          example: 30.0
          description: Total time limit for players finishing quest
        creator:
          type: string
          example: "get_smart_every_day"
          description: User who created quest
        enemy:
          type: string
          example: "Alan Turing"
          description: Quest's villain challenging players with problems
        background:
          type: string
          example: "Tokyo"
          description: Wallpaper of quest

    pre_created_Quest:
      type: object
      properties:
        difficulty:
          type: integer
          example: 3
          description: Measured rigor of quest
        number_of_problems:
          type: integer
          example: 20
          description: Total questions in quest
        problem_topic:
          type: string
          example: "Algorithms"
          description:  Topic of quest
        time_limit:
          type: number
          example: 30.0
          description: Total time limit for players finishing quest
        creator:
          type: string
          example: "get_smart_every_day"
          description: User who created quest
        enemy:
          type: string
          example: "Alan Turing"
          description: Quest's villain challenging players with problems
        background:
          type: string
          example: "Tokyo"
          description: Wallpaper of quest

    patched_Quest:
      type: object
      properties:
        number_of_problems:
          type: integer
          example: 30
          description: Total questions in quest


